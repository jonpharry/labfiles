{
	"info": {
		"_postman_id": "b3a32108-6c4e-4950-8247-a2a201e00a84",
		"name": "IBM Cloud Identity V2.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01 Get Access Token (Start of every session)",
			"item": [
				{
					"name": "Get AccessToken (/v1.0/endpoint/default/token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d020ab91-2fea-4471-b80f-1ea55a8f3995",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have access_token\", function() {",
									"   pm.response.to.have.jsonBody(\"access_token\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"access_token\", jsonData.access_token);",
									"});",
									"",
									"",
									"pm.test(\"expect access_token to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"access_token\")).to.exist; ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/token",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Introspect (/v1.0/endpoint/default/introspect)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/introspect",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "#User Info (/v1.0/endpoint/default/userinfo)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/userinfo",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"userinfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Revoke (/oidc/endpoint/default/revoke)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/revoke",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"revoke"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "85084e5b-bfd9-4d5f-b17f-cf920d888437",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "029650f3-be14-4cba-99a1-5abc96998097",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "02 Setup - Create Test User",
			"item": [
				{
					"name": "Create Test User (/v2.0/Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "311c4547-23e3-4477-b235-da9c415bc92d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect response body to contain id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect test_userid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/scim+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"{{test_username}}\",\r\n  \"password\": \"{{test_password}}\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/Users",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users"
							]
						}
					},
					"response": [
						{
							"name": "Create TOTP (/authnmethods/totp) - adriana",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authnmethods",
										"totp",
										""
									],
									"query": [
										{
											"key": "qrcodeInResponse",
											"value": "true"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "Keep-Alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "1.1 169.53.65.119:443",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Backside-Transport",
									"value": "OK OK",
									"name": "X-Backside-Transport",
									"description": "Custom header"
								},
								{
									"key": "X-Client-IP",
									"value": "32.97.110.58",
									"name": "X-Client-IP",
									"description": "Custom header"
								},
								{
									"key": "X-Global-Transaction-ID",
									"value": "1321042401",
									"name": "X-Global-Transaction-ID",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en-US",
									"name": "content-language",
									"description": "The language the content is in"
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "date",
									"value": "Tue, 14 Nov 2017 22:41:01 GMT",
									"name": "date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "p3p",
									"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
									"name": "p3p",
									"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "PBC5YS:463686615",
									"key": "DPJSESSIONID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
									"key": "PD-S-SESSION-ID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": false,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
								}
							],
							"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
						}
					]
				},
				{
					"name": "#Get user by userName (/v2.0/Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9354ecf5-3e1c-4ee5-858a-76d2a2de21e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have totalResults\", function() {",
									"   pm.response.to.have.jsonBody(\"totalResults\"); ",
									"});",
									"",
									"pm.test(\"expect totalResults = 1\", function() {",
									"   pm.expect(pm.response.json().totalResults).to.equal(1);",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.Resources[0].id);",
									"});",
									"",
									"pm.test(\"expect test_userid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/Users?filter=userName+eq+\"{{test_username}}\"",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users"
							],
							"query": [
								{
									"key": "filter",
									"value": "userName+eq+\"{{test_username}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9354ecf5-3e1c-4ee5-858a-76d2a2de21e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have totalResults\", function() {",
									"   pm.response.to.have.jsonBody(\"totalResults\"); ",
									"});",
									"",
									"pm.test(\"expect totalResults = 1\", function() {",
									"   pm.expect(pm.response.json().totalResults).to.equal(1);",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.Resources[0].id);",
									"});",
									"",
									"pm.test(\"expect test_userid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/Users?filter=userName+eq+\"{{test_username}}\"",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users"
							],
							"query": [
								{
									"key": "filter",
									"value": "userName+eq+\"{{test_username}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Applications Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9354ecf5-3e1c-4ee5-858a-76d2a2de21e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have totalResults\", function() {",
									"   pm.response.to.have.jsonBody(\"totalResults\"); ",
									"});",
									"",
									"pm.test(\"expect totalResults = 1\", function() {",
									"   pm.expect(pm.response.json().totalResults).to.equal(1);",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.Resources[0].id);",
									"});",
									"",
									"pm.test(\"expect test_userid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v2.0/Users?filter=userName+eq+\"{{test_username}}\"",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users"
							],
							"query": [
								{
									"key": "filter",
									"value": "userName+eq+\"{{test_username}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all Enrollments by User ID (/v1.0/authnmethods)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39a59a05-c66e-4359-9724-a26eebf60293",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods?search=owner=\"{{test_userid}}\"",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods"
							],
							"query": [
								{
									"key": "search",
									"value": "owner=\"{{test_userid}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete User (/v2.0/Users/{{test_userid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "853698ab-3ab8-41f0-98b5-1e6e0e9387e9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('test_userid');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{test_userid}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users",
								"{{test_userid}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8353530b-7fa8-4961-bff2-b5ead49ac51a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5ec1021c-e7a8-49a6-b62a-38c51f30acea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "03 Email OTP - Transient",
			"item": [
				{
					"name": "#Get Email OTP Configuration Properties (/v1.0/authnconfig/authnmethods/emailotp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3784512-908b-44b2-bdde-c7554c9d16e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/emailotp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"emailotp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set Email OTP Configuration Properties (/v1.0/authnconfig/authnmethods/emailotp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4971657e-bc69-4a86-92ae-9c58f53d93c2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charSet\": \"0123456789\",\n    \"maxTries\": 5,\n    \"lifeTimeSec\": 300,\n    \"length\": 6,\n    \"enableValidationOnEnroll\": true,\n    \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/emailotp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"emailotp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all transient Email OTP verification txns (/v1.0/authnmethods/emailotp/transient/verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fac327bc-b50a-45b2-8d20-91ea7b8c7b83",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstTxn;",
									"",
									"pm.test(\"expect response body to have txrns\", function() {",
									"   pm.response.to.have.jsonBody(\"txrns\");",
									"});",
									"",
									"pm.test(\"expect txrns to have at least one member\", function() {",
									"   pm.expect(pm.response.json().txrns.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstTxn = jsonData.txrns[0];",
									"});",
									"",
									"if (firstTxn !== undefined) {",
									"   pm.environment.set(\"email_txnid\", firstTxn.id);",
									"}",
									"",
									"pm.test(\"expect email_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"email_txnid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/transient/verification",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"transient",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new transient Email OTP verification txn (/v1.0/authnmethods/emailotp/transient/verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71fbff53-b10a-47a3-a52e-e024becac90e",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"email_txnid\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test(\"expect email_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"email_txnid\")).to.exist; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98d63f10-e616-4041-b057-f706c19293a9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otpDeliveryEmailAddress\": \"{{test_email}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/transient/verification",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"transient",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate transient Email OTP verification txn (/v1.0/authnmethods/emailotp/transient/verification/{{txnid}}) copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df90f9e2-74ea-49f2-ad4f-82836f23dbdb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"752144\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/transient/verification/{{email_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"transient",
								"verification",
								"{{email_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get transient Email OTP verification txn by id (/v1.0/authnmethods/emailotp/transient/verification/{{txnid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f8565f6-a486-4a52-a055-a33df44ea2d6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/transient/verification/{{email_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"transient",
								"verification",
								"{{email_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete transient Email OTP verification txn (/v1.0/authnmethods/emailotp/transient/verification/{{txnid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2278a7e2-8295-45cc-98a5-086abc18c2b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('email_txnid');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/transient/verification/{{email_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"transient",
								"verification",
								"{{email_txnid}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ae223da3-9389-484d-abf1-da961fcc9d2f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3b0aad5a-f9eb-42cb-810f-6b1734ebc48b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "04 SMS OTP - Transient",
			"item": [
				{
					"name": "#Get SMS OTP Configuration Properties (/v1.0/authnconfig/authnmethods/smsotp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaf4b5c2-092f-4bf9-84d5-226cb4145ca5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/smsotp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"smsotp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set SMS OTP Configuration Properties (/v1.0/authnconfig/authnmethods/smsotp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "788209fa-15a2-4dda-a430-6f1b33987400",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charSet\": \"0123456789\",\n    \"maxTries\": 5,\n    \"lifeTimeSec\": 300,\n    \"length\": 6,\n    \"enableValidationOnEnroll\": true,\n    \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/smsotp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"smsotp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all transient SMS OTP verification txns (/v1.0/authnmethods/smsotp/transient/verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "675d8386-488d-49c6-a1bd-6fb50da1a13e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstTxn;",
									"",
									"pm.test(\"expect response body to have txrns\", function() {",
									"   pm.response.to.have.jsonBody(\"txrns\");",
									"});",
									"",
									"pm.test(\"expect txrns to have at least one member\", function() {",
									"   pm.expect(pm.response.json().txrns.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstTxn = jsonData.txrns[0];",
									"});",
									"",
									"if (firstTxn !== undefined) {",
									"   pm.environment.set(\"sms_txnid\", firstTxn.id);",
									"}",
									"",
									"pm.test(\"expect sms_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"sms_txnid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/transient/verification",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"transient",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new transient SMS OTP verification txn (/v1.0/authnmethods/smsotp/transient/verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b2e5704-b92b-484a-9d13-4e617acf1d47",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"sms_txnid\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test(\"expect sms_txnid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"sms_txnid\")).to.exist; ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "add0b068-690f-42d7-8193-98c9fbb1acf5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otpDeliveryMobileNumber\": \"{{test_phone}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/transient/verification",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"transient",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate transient SMS OTP verification txn (/v1.0/authnmethods/smsotp/transient/verification/{{txnid}}) copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6bbd6547-418f-4a50-9214-d5c40e554101",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "856d7157-54d8-4a88-9ef9-5e18cc3e21c6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"794279\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/transient/verification/{{sms_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"transient",
								"verification",
								"{{sms_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get transient SMS OTP verification txn by id (/v1.0/authnmethods/smsotp/transient/verification/{{txnid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14394535-ba9f-4c88-9cc9-f23bb3d84e90",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/transient/verification/{{sms_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"transient",
								"verification",
								"{{sms_txnid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete transient SMS OTP verification txn (/v1.0/authnmethods/smsotp/transient/verification/{{txnid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "560fa038-d506-4414-90f8-a7d2b20a8636",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('sms_txnid');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/transient/verification/{{sms_txnid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"transient",
								"verification",
								"{{sms_txnid}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "463740f5-7c26-4d31-bc27-84884851c580",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d07732cd-54ad-47d5-abce-5e25edea6c38",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "05 Password Authentication",
			"item": [
				{
					"name": "Authenticate user (/v2.0/Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f0bed20-f37c-4c65-b3bc-13f280aad54f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect response body to contain id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect test_userid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"{{test_username}}\",\r\n  \"password\": \"{{test_password}}\",\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:ibm:core:2.0:AuthenticateUser\"\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v2.0/Users/authentication",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v2.0",
								"Users",
								"authentication"
							]
						}
					},
					"response": [
						{
							"name": "Create TOTP (/authnmethods/totp) - adriana",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authnmethods",
										"totp",
										""
									],
									"query": [
										{
											"key": "qrcodeInResponse",
											"value": "true"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "Keep-Alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "1.1 169.53.65.119:443",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Backside-Transport",
									"value": "OK OK",
									"name": "X-Backside-Transport",
									"description": "Custom header"
								},
								{
									"key": "X-Client-IP",
									"value": "32.97.110.58",
									"name": "X-Client-IP",
									"description": "Custom header"
								},
								{
									"key": "X-Global-Transaction-ID",
									"value": "1321042401",
									"name": "X-Global-Transaction-ID",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en-US",
									"name": "content-language",
									"description": "The language the content is in"
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "date",
									"value": "Tue, 14 Nov 2017 22:41:01 GMT",
									"name": "date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "p3p",
									"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
									"name": "p3p",
									"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "PBC5YS:463686615",
									"key": "DPJSESSIONID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
									"key": "PD-S-SESSION-ID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": false,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
								}
							],
							"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bdc6553a-53bf-4a23-8bf4-b0c0dbcd2aa4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5879f6a2-0dbf-4021-90a4-ec7a72ddf36b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "06 TOTP",
			"item": [
				{
					"name": "#Get TOTP Configuration Properties (/v1.0/authnconfig/authnmethods/totp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c67ba905-c84e-417b-ad2b-15a7917565b1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/totp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"totp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set TOTP Configuration Properties (/v1.0/authnconfig/authnmethods/totp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9adf7e4e-d646-422b-b12e-693b00ba8dd8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeStepSkew\": 2,\n    \"secretKeyUrl\": \"otpauth://totp/{{tenantid}}:@USER_NAME@?secret=@SECRET_KEY@&issuer={{tenantid}}%20TOTP&algorithm=@ALGORITHM@\",\n    \"length\": 6,\n    \"oneTimeUse\": true,\n    \"timeStepSizeSec\": 30,\n    \"enabled\": true,\n    \"algorithm\": \"HmacSHA1\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/totp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"totp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all TOTP enrollments (/v1.0/authnapps/totp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab16e430-21d3-41e6-9f59-843a52946972",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "#Create TOTP enrollment - Return JSON (/v1.0/authnmethods/totp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b840605e-b9a2-4ee6-a900-578d131b1704",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"totp_id\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test(\"expect totp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"totp_id\")).to.exist; ",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp"
							]
						}
					},
					"response": [
						{
							"name": "Create TOTP (/authnmethods/totp) - adriana",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authnmethods",
										"totp",
										""
									],
									"query": [
										{
											"key": "qrcodeInResponse",
											"value": "true"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "Keep-Alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "1.1 169.53.65.119:443",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Backside-Transport",
									"value": "OK OK",
									"name": "X-Backside-Transport",
									"description": "Custom header"
								},
								{
									"key": "X-Client-IP",
									"value": "32.97.110.58",
									"name": "X-Client-IP",
									"description": "Custom header"
								},
								{
									"key": "X-Global-Transaction-ID",
									"value": "1321042401",
									"name": "X-Global-Transaction-ID",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en-US",
									"name": "content-language",
									"description": "The language the content is in"
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "date",
									"value": "Tue, 14 Nov 2017 22:41:01 GMT",
									"name": "date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "p3p",
									"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
									"name": "p3p",
									"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "PBC5YS:463686615",
									"key": "DPJSESSIONID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
									"key": "PD-S-SESSION-ID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": false,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
								}
							],
							"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
						}
					]
				},
				{
					"name": "#Create TOTP enrollment - Return JSON+QR (/v1.0/authnmethods/totp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55be2a3a-7a85-427b-9a1f-28af53c78667",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"totp_id\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test(\"expect totp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"totp_id\")).to.exist; ",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp?qrcodeInResponse=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp"
							],
							"query": [
								{
									"key": "qrcodeInResponse",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"name": "Create TOTP (/authnmethods/totp) - adriana",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authnmethods",
										"totp",
										""
									],
									"query": [
										{
											"key": "qrcodeInResponse",
											"value": "true"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "Keep-Alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "1.1 169.53.65.119:443",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Backside-Transport",
									"value": "OK OK",
									"name": "X-Backside-Transport",
									"description": "Custom header"
								},
								{
									"key": "X-Client-IP",
									"value": "32.97.110.58",
									"name": "X-Client-IP",
									"description": "Custom header"
								},
								{
									"key": "X-Global-Transaction-ID",
									"value": "1321042401",
									"name": "X-Global-Transaction-ID",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en-US",
									"name": "content-language",
									"description": "The language the content is in"
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "date",
									"value": "Tue, 14 Nov 2017 22:41:01 GMT",
									"name": "date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "p3p",
									"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
									"name": "p3p",
									"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "PBC5YS:463686615",
									"key": "DPJSESSIONID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
									"key": "PD-S-SESSION-ID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": false,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
								}
							],
							"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
						}
					]
				},
				{
					"name": "Create TOTP enrollment - Return QR Code image  (/v1.0/authnmethods/totp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb35a2b8-ab62-486b-b88f-59ffcc0bed31",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "image/png"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp"
							]
						}
					},
					"response": [
						{
							"name": "Create TOTP (/authnmethods/totp) - adriana",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authnmethods",
										"totp",
										""
									],
									"query": [
										{
											"key": "qrcodeInResponse",
											"value": "true"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "Keep-Alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "1.1 169.53.65.119:443",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Backside-Transport",
									"value": "OK OK",
									"name": "X-Backside-Transport",
									"description": "Custom header"
								},
								{
									"key": "X-Client-IP",
									"value": "32.97.110.58",
									"name": "X-Client-IP",
									"description": "Custom header"
								},
								{
									"key": "X-Global-Transaction-ID",
									"value": "1321042401",
									"name": "X-Global-Transaction-ID",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en-US",
									"name": "content-language",
									"description": "The language the content is in"
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "date",
									"value": "Tue, 14 Nov 2017 22:41:01 GMT",
									"name": "date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "p3p",
									"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
									"name": "p3p",
									"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "PBC5YS:463686615",
									"key": "DPJSESSIONID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
									"key": "PD-S-SESSION-ID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": false,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
								}
							],
							"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
						}
					]
				},
				{
					"name": "Get TOTP enrollment by userId (/v1.0/authnapps/totp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6d2ddb0-c7ad-4641-92c7-e81394c8167d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have totp\", function() {",
									"   pm.response.to.have.jsonBody(\"totp\");",
									"    let jsonData = JSON.parse(responseBody);",
									"    if ( jsonData.totp.length > 0) {",
									"       postman.setEnvironmentVariable(\"totp_id\", jsonData.totp[0].id);",
									"    }",
									"});",
									"",
									"pm.test(\"expect totp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"totp_id\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get TOTP enrollment by id (/v1.0/authnapps/totp/{{totp_id}})",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/{{totp_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp",
								"{{totp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify TOTP (/v1.0/authnmethods/totp/{{totp_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8191cb79-9ec8-4698-b0e7-e555fa984e46",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"totp\":\"231123\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/{{totp_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp",
								"{{totp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Disable TOTP enrollment by id (/v1.0/authnapps/totp/{{totp_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "845385ca-b7d6-46d8-a01c-f823729d070d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/isEnabled\", \"value\": \"false\", \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/{{totp_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp",
								"{{totp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enable TOTP enrollment by id (/v1.0/authnapps/totp/{{totp_id}})",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/isEnabled\", \"value\": \"true\", \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/{{totp_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp",
								"{{totp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete TOTP enrollment (/v1.0/authnapps/totp/{{totp_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b227c09-df37-43dc-95cb-057fdcbfb3eb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('totp_id')",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/{{totp_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"totp",
								"{{totp_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "433f072c-fbc2-46ff-ad1b-fd7a573634e3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "54b68304-569a-49b0-aca4-c06bae88be07",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "07 Email OTP - Enrolled",
			"item": [
				{
					"name": "#Get Email OTP Configuration Properties (/v1.0/authnconfig/authnmethods/emailotp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f77130c7-22f6-40b4-9877-c04f1159639c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/emailotp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"emailotp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set Email OTP Configuration Properties (/v1.0/authnconfig/authnmethods/emailotp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fad3556-76e6-4ade-a983-8bc0047c4f0d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charSet\": \"0123456789\",\n    \"maxTries\": 5,\n    \"lifeTimeSec\": 300,\n    \"length\": 6,\n    \"enableValidationOnEnroll\": true,\n    \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/emailotp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"emailotp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all Email OTP enrollments (/v1.0/authnmethods/emailotp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e26e106-10f7-426b-882e-933b02d85373",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Email OTP enrollment (/v1.0/authnmethods/emailotp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "771bfe3f-d160-46fc-acfb-833eb2644867",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"emailotp_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect response body to have lastValidation\", function() {",
									"   pm.response.to.have.jsonBody(\"lastValidation\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   let validation_url = jsonData.lastValidation;",
									"   let validation_id = validation_url.substring(validation_url.lastIndexOf('/') + 1);",
									"   postman.setEnvironmentVariable(\"emailotp_vid\", validation_id);",
									"});",
									"",
									"pm.test(\"expect emailotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect emailotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_vid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\":\"{{test_userid}}\", \n  \"isEnabled\":true,\n  \"attributes\": {\n      \t  \"otpDeliveryEmailAddress\": \"{{test_email}}\"\n        }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Email OTP enrollment by userId (/v1.0/authnapps/emailotp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9869b7c-4074-4c95-ba51-dfb37d6afe57",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstEmailotp",
									";",
									"",
									"pm.test(\"expect response body to have emailotp\", function() {",
									"   pm.response.to.have.jsonBody(\"emailotp\");",
									"});",
									"",
									"pm.test(\"expect emailotp to have at least one member\", function() {",
									"   pm.expect(pm.response.json().emailotp.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstEmailotp = jsonData.emailotp[0];",
									"});",
									"",
									"if (firstEmailotp !== undefined) {",
									"   pm.environment.set(\"emailotp_id\", firstEmailotp.id);",
									"}",
									"",
									"pm.test(\"expect emailotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_id\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/emailotp?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Email OTP enrollment by id (/v1.0/authnmethods/emailotp/{{emailotp_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcc44311-6048-4e4f-88cb-c70d93a0e490",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have lastValidation\", function() {",
									"   pm.response.to.have.jsonBody(\"lastValidation\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   let validation_url = jsonData.lastValidation;",
									"   let validation_id = validation_url.substring(validation_url.lastIndexOf('/') + 1);",
									"   postman.setEnvironmentVariable(\"emailotp_vid\", validation_id);",
									"});",
									"",
									"pm.test(\"expect emailotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_vid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all enrolled Email OTP validation txns (/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e35e4905-4f71-4c49-87b5-6c86f1e347f9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstTxn;",
									"",
									"pm.test(\"expect response body to have txrns\", function() {",
									"   pm.response.to.have.jsonBody(\"txrns\");",
									"});",
									"",
									"pm.test(\"expect txrns to have at least one member\", function() {",
									"   pm.expect(pm.response.json().txrns.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstTxn = jsonData.txrns[0];",
									"});",
									"",
									"if (firstTxn !== undefined) {",
									"   pm.environment.set(\"emailotp_vid\", firstTxn.id);",
									"}",
									"",
									"pm.test(\"expect emailotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_vid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"validator"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Initiate new enrolled Email OTP validation txn (/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4741c69c-686b-42f4-8481-64706a7a0d9a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd1b2d78-da28-41cb-a9b7-9adb771a7966",
								"type": "text/javascript",
								"exec": [
									"// build a correlation variable with random 4-digit value",
									"var numstr = \"\"+Math.floor(Math.random()*1000);",
									"var pad = \"0000\";",
									"var correlation = pad.substring(0, pad.length - numstr.length) + numstr;",
									"console.log(\"correlation: \" + correlation);",
									"postman.setEnvironmentVariable(\"correlation\", correlation);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"correlation\": \"{{correlation}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"validator"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get enrolled Email OTP validation txn by id (/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator/{{emailotp_vid}})",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator/{{emailotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"validator",
								"{{emailotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate enrolled Email OTP against validation txn (/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator/{{emailotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72e4aca9-f0b3-4741-99e1-8a12d4da56da",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"988812\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator/{{emailotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"validator",
								"{{emailotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete enrolled Email OTP validation txn (/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator/{{emailotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f588867-b4a5-407d-b8eb-10e16a56d743",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('emailotp_vid');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/validator/{{emailotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"validator",
								"{{emailotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all enrolled Email OTP verification txns (/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fd624f1-e463-452e-890c-61bf8ab0b3e7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstTxn;",
									"",
									"pm.test(\"expect response body to have txrns\", function() {",
									"   pm.response.to.have.jsonBody(\"txrns\");",
									"});",
									"",
									"pm.test(\"expect txrns to have at least one member\", function() {",
									"   pm.expect(pm.response.json().txrns.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstTxn = jsonData.txrns[0];",
									"});",
									"",
									"if (firstTxn !== undefined) {",
									"   pm.environment.set(\"emailotp_vid\", firstTxn.id);",
									"}",
									"",
									"pm.test(\"expect emailotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_vid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new enrolled Email OTP verification txn (/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "878b54d7-aeec-4d89-bc3c-4df832abc6b2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"emailotp_vid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect emailotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"emailotp_vid\")).to.exist; ",
									"});",
									"",
									"pm.environment.unset('correlation');",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "442991f2-259a-4f3a-9031-88d522b7d636",
								"type": "text/javascript",
								"exec": [
									"// build a correlation variable with random 4-digit value",
									"var numstr = \"\"+Math.floor(Math.random()*1000);",
									"var pad = \"0000\";",
									"var correlation = pad.substring(0, pad.length - numstr.length) + numstr;",
									"console.log(\"correlation: \" + correlation);",
									"postman.setEnvironmentVariable(\"correlation\", correlation);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"correlation\": \"{{correlation}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get enrolled Email OTP verification txn by id (/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification/{{emailotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78acc15b-16f6-41d3-bdc4-a87f7919637e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification/{{emailotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"verification",
								"{{emailotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate enrolled Email OTP against verification txn (/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification/{{emailotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15342a17-8c55-424e-993c-f964b9c426a6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"943560\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification/{{emailotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"verification",
								"{{emailotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete enrolled Email OTP verification txn (/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification/{{emailotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efb3620b-0924-4d94-864f-c39a0fa5c5c0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('emailotp_vid');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}/verification/{{emailotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}",
								"verification",
								"{{emailotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete Email OTP enrollment (/v1.0/authnmethods/emailotp/{{emailotp_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36e78d8b-bbf9-4b8c-87b6-555e1458c631",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('emailotp_id');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{emailotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{emailotp_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "247f9cc3-470f-4a27-9ff5-16b664702005",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1f4bd94b-c972-450d-b7bf-4235473cc690",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "08 SMS OTP - Enrolled",
			"item": [
				{
					"name": "#Get SMS OTP Configuration Properties (/v1.0/authnconfig/authnmethods/smsotp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f77130c7-22f6-40b4-9877-c04f1159639c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/smsotp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"smsotp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Set SMS OTP Configuration Properties (/v1.0/authnconfig/authnmethods/smsotp/properties)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fad3556-76e6-4ade-a983-8bc0047c4f0d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"charSet\": \"0123456789\",\n    \"maxTries\": 5,\n    \"lifeTimeSec\": 300,\n    \"length\": 6,\n    \"enableValidationOnEnroll\": true,\n    \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnconfig/authnmethods/smsotp/properties",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnconfig",
								"authnmethods",
								"smsotp",
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all SMS OTP enrollments (/v1.0/authnmethods/smsotp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f33558cc-697a-4f71-b7d1-eb8681864280",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SMS OTP enrollment (/v1.0/authnmethods/smsotp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59a5b911-b7e7-473a-b120-f272184e9052",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"smsotp_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect response body to have lastValidation\", function() {",
									"   pm.response.to.have.jsonBody(\"lastValidation\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   let validation_url = jsonData.lastValidation;",
									"   let validation_id = validation_url.substring(validation_url.lastIndexOf('/') + 1);",
									"   postman.setEnvironmentVariable(\"smsotp_vid\", validation_id);",
									"});",
									"",
									"pm.test(\"expect smsotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"smsotp_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect smsotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"smsotp_vid\")).to.exist; ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\":\"{{test_userid}}\", \n  \"isEnabled\":true,\n  \"attributes\": {\n      \t  \"otpDeliveryMobileNumber\": \"{{test_phone}}\"\n        }\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get SMS OTP enrollment by userId (/v1.0/authnapps/smsotp)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "019922d9-3aa5-4f45-9961-7b4682a255fa",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstSMSotp",
									";",
									"",
									"pm.test(\"expect response body to have smsotp\", function() {",
									"   pm.response.to.have.jsonBody(\"smsotp\");",
									"});",
									"",
									"pm.test(\"expect smsotp to have at least one member\", function() {",
									"   pm.expect(pm.response.json().smsotp.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstSMSotp = jsonData.smsotp[0];",
									"});",
									"",
									"if (firstSMSotp !== undefined) {",
									"   pm.environment.set(\"smsotp_id\", firstSMSotp.id);",
									"}",
									"",
									"pm.test(\"expect smsotp_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"smsotp_id\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/smsotp?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get SMS OTP enrollment by id (/v1.0/authnmethods/smsotp/{{smsotp_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1950c191-7d3b-43f5-a7c5-abefaf1fa6c5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have lastValidation\", function() {",
									"   pm.response.to.have.jsonBody(\"lastValidation\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   let validation_url = jsonData.lastValidation;",
									"   let validation_id = validation_url.substring(validation_url.lastIndexOf('/') + 1);",
									"   postman.setEnvironmentVariable(\"smsotp_vid\", validation_id);",
									"});",
									"",
									"pm.test(\"expect smsotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"smsotp_vid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all enrolled SMS OTP validation txns (/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e19bb80-3f47-4c13-9d81-aca5d487a5f2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstTxn;",
									"",
									"pm.test(\"expect response body to have txrns\", function() {",
									"   pm.response.to.have.jsonBody(\"txrns\");",
									"});",
									"",
									"pm.test(\"expect txrns to have at least one member\", function() {",
									"   pm.expect(pm.response.json().txrns.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstTxn = jsonData.txrns[0];",
									"});",
									"",
									"if (firstTxn !== undefined) {",
									"   pm.environment.set(\"smsotp_vid\", firstTxn.id);",
									"}",
									"",
									"pm.test(\"expect smsotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"smsotp_vid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"validator"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Initiate new enrolled SMS OTP validation txn (/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4741c69c-686b-42f4-8481-64706a7a0d9a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd1b2d78-da28-41cb-a9b7-9adb771a7966",
								"type": "text/javascript",
								"exec": [
									"// build a correlation variable with random 4-digit value",
									"var numstr = \"\"+Math.floor(Math.random()*1000);",
									"var pad = \"0000\";",
									"var correlation = pad.substring(0, pad.length - numstr.length) + numstr;",
									"console.log(\"correlation: \" + correlation);",
									"postman.setEnvironmentVariable(\"correlation\", correlation);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"correlation\": \"{{correlation}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"validator"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get enrolled SMS OTP validation txn by id (/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator/{{smsotp_vid}})",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/emailotp/{{smsotp_id}}/validator/{{smsotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"emailotp",
								"{{smsotp_id}}",
								"validator",
								"{{smsotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate enrolled SMS OTP against validation txn (/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator/{{smsotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72e4aca9-f0b3-4741-99e1-8a12d4da56da",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"799207\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator/{{smsotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"validator",
								"{{smsotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete enrolled SMS OTP validation txn (/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator/{{smsotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c8c3288-d2f9-4ac4-a543-e1d05f576b60",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('smsotp_vid');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/validator/{{smsotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"validator",
								"{{smsotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get all enrolled SMS OTP verification txns (/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6ef52c8-288e-41b0-9453-99b4ea9adb15",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"var firstTxn;",
									"",
									"pm.test(\"expect response body to have txrns\", function() {",
									"   pm.response.to.have.jsonBody(\"txrns\");",
									"});",
									"",
									"pm.test(\"expect txrns to have at least one member\", function() {",
									"   pm.expect(pm.response.json().txrns.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    firstTxn = jsonData.txrns[0];",
									"});",
									"",
									"if (firstTxn !== undefined) {",
									"   pm.environment.set(\"smsotp_vid\", firstTxn.id);",
									"}",
									"",
									"pm.test(\"expect smsotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"smsotp_vid\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate new enrolled SMS OTP verification txn (/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c7afb7d-e214-4929-bafe-6750d2b3a5a3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"smsotp_vid\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test(\"expect smsotp_vid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"smsotp_vid\")).to.exist; ",
									"});",
									"",
									"pm.environment.unset('correlation');",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "442991f2-259a-4f3a-9031-88d522b7d636",
								"type": "text/javascript",
								"exec": [
									"// build a correlation variable with random 4-digit value",
									"var numstr = \"\"+Math.floor(Math.random()*1000);",
									"var pad = \"0000\";",
									"var correlation = pad.substring(0, pad.length - numstr.length) + numstr;",
									"console.log(\"correlation: \" + correlation);",
									"postman.setEnvironmentVariable(\"correlation\", correlation);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"correlation\": \"{{correlation}}\"\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get enrolled SMS OTP verification txn by id (/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification/{{smsotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78acc15b-16f6-41d3-bdc4-a87f7919637e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification/{{smsotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"verification",
								"{{smsotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate enrolled SMS OTP against verification txn (/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification/{{smsotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15342a17-8c55-424e-993c-f964b9c426a6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otp\": \"540788\" \r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification/{{smsotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"verification",
								"{{smsotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete enrolled SMS OTP verification txn (/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification/{{smsotp_vid}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6c912af-1546-43aa-89ad-dff21f941345",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('smsotp_vid');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}/verification/{{smsotp_vid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}",
								"verification",
								"{{smsotp_vid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete SMS OTP enrollment (/v1.0/authnmethods/smsotp/{{smsotp_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7c1b00d-5ef2-4e22-9ff8-12fdbbef45b3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('smsotp_id');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/authnmethods/smsotp/{{smsotp_id}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"smsotp",
								"{{smsotp_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "247f9cc3-470f-4a27-9ff5-16b664702005",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1f4bd94b-c972-450d-b7bf-4235473cc690",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "09 Mobile PUSH (IBM Verify)",
			"item": [
				{
					"name": "#Get Signature Auth Method Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03affb72-e2fa-49a2-90b3-4552cd4e8375",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signature",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signature"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Signature Auth Method Config (to enable)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4503563d-d7d3-4ed1-8390-1fe4578927b6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userPresence\": {\n        \"supportedAlgorithms\": [\n            \"RSASHA256\"\n        ],\n        \"enabled\": true,\n        \"algorithm\": \"RSASHA256\"\n    },\n    \"fingerprint\": {\n        \"supportedAlgorithms\": [\n            \"RSASHA256\"\n        ],\n        \"enabled\": true,\n        \"algorithm\": \"RSASHA256\"\n    },\n    \"enabled\": true\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signature",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signature"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get All Authenticator Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a147d247-74f5-4832-b5c7-e6dd7ed6850b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Authenticator Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f630cfa1-f5c1-4770-acd4-5ea2cd931532",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"authclient_id\", jsonData.id);",
									"});",
									"",
									"",
									"pm.test(\"expect authclient_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"authclient_id\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authorizationCodeLifetime\": 600,\n  \"enabled\": true,\n  \"name\": \"{{authclient_name}}\",\n  \"refreshTokenLifetime\": 32000000,\n  \"accessTokenLifetime\": 3600\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Authenticator Client by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06e784e0-6ef0-4293-bd3c-1bb6040d1a6e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have clients\", function() {",
									"   pm.response.to.have.jsonBody(\"clients\");",
									"});",
									"",
									"pm.test(\"expect clients to have at least one member\", function() {",
									"   pm.expect(pm.response.json().clients.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"authclient_id\", jsonData.clients[0].id);",
									"});",
									"",
									"pm.test(\"expect authclient_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"authclient_id\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients?search=name%20%3D%20%22{{authclient_name}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients"
							],
							"query": [
								{
									"key": "search",
									"value": "name%20%3D%20%22{{authclient_name}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Authenticator Client Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04da0026-4576-479f-8285-cd5b08be3871",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}/metadata",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients",
								"{{authclient_id}}",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Authenticator Client Metadata (set service name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fb56649-91aa-4beb-be13-c3a8b68f054d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceName\": \"{{tenantid}} Verify Demo\",\n    \"customAttributes\": {}\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}/metadata",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients",
								"{{authclient_id}}",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Disable Authenticator Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0022f59d-82f5-4c5f-8b33-4ca6b231ad52",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": false, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients",
								"{{authclient_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enable Authenticator Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96b3f37d-0d8c-4467-8050-ddfe5c93e2b8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": true, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients",
								"{{authclient_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get All Authenticators",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "383359e1-72a5-43ad-9328-ebeb4d72115e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enroll an Authenticator (Return JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a54b85b1-02a5-48d2-8442-fb8a7bf31f84",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"clientId\": \"{{authclient_id}}\",\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/initiation",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"initiation"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enroll an Authenticator (Return JSON+QR)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3dcd290-2cc5-418d-a188-a313aed86f15",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"clientId\": \"{{authclient_id}}\",\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/initiation?qrcodeInResponse=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"initiation"
							],
							"query": [
								{
									"key": "qrcodeInResponse",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Enroll an Authenticator (Return QR code image)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe915dc0-b4cf-4116-8dfb-a0faf741846b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "image/png"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"owner\": \"{{test_userid}}\",\n  \"clientId\": \"{{authclient_id}}\",\n  \"accountName\": \"{{test_username}}\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/initiation",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"initiation"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Authenticators by Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "658ec020-3bcc-421b-9ff5-3d72c0a7082f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have authenticators\", function() {",
									"   pm.response.to.have.jsonBody(\"authenticators\");",
									"});",
									"",
									"pm.test(\"expect authenticators to have at least one member\", function() {",
									"   pm.expect(pm.response.json().authenticators.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"auth_id\", jsonData.authenticators[0].id);",
									"});",
									"",
									"pm.test(\"expect auth_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"auth_id\")).to.exist; ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Authenticator by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Disable Authenticator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0022f59d-82f5-4c5f-8b33-4ca6b231ad52",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": false, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enable Authenticator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96b3f37d-0d8c-4467-8050-ddfe5c93e2b8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": true, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get All Signatures",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6ba8273-9141-4b05-a9ef-719aedab6b2e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures"
							]
						}
					},
					"response": []
				},
				{
					"name": "CHOOSE: Get Signatures by Owner (Return 1st)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bd9d566-475b-4910-b2c2-dfe4fb756b80",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have signatures\", function() {",
									"   pm.response.to.have.jsonBody(\"signatures\");",
									"});",
									"",
									"pm.test(\"expect signatures to have at least one member\", function() {",
									"   pm.expect(pm.response.json().signatures.length).to.be.above(0);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"signature_id\", jsonData.signatures[0].id);",
									"    pm.environment.set(\"signature_subtype\", jsonData.signatures[0].subType);",
									"    pm.environment.set(\"auth_id\", jsonData.signatures[0].attributes.authenticatorId);",
									"});",
									"",
									"pm.test(\"expect signature_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect signature_subtype to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect auth_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"auth_id\")).to.exist; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ae709926-380d-4605-a41f-1bf13a320afa",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"signature_id\");",
									"pm.environment.unset(\"signature_subtype\");",
									"pm.environment.unset(\"auth_id\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CHOOSE: Get Signatures by Owner (Return 2nd)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b439077-da95-443c-96ed-3534c55a7fe4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have signatures\", function() {",
									"   pm.response.to.have.jsonBody(\"signatures\");",
									"});",
									"",
									"pm.test(\"expect signatures to have at least two members\", function() {",
									"   pm.expect(pm.response.json().signatures.length).to.be.above(1);",
									"    let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"signature_id\", jsonData.signatures[1].id);",
									"    pm.environment.set(\"signature_subtype\", jsonData.signatures[1].subType);",
									"    pm.environment.set(\"auth_id\", jsonData.signatures[1].attributes.authenticatorId);",
									"});",
									"",
									"pm.test(\"expect signature_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect signature_subtype to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect auth_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"auth_id\")).to.exist; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ae709926-380d-4605-a41f-1bf13a320afa",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"signature_id\");",
									"pm.environment.unset(\"signature_subtype\");",
									"pm.environment.unset(\"auth_id\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures?search=owner%20%3D%20%22{{test_userid}}%22",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures"
							],
							"query": [
								{
									"key": "search",
									"value": "owner%20%3D%20%22{{test_userid}}%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get Signature by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fbd5005-106a-43b8-95ed-457da4a22e8a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect JSON response body.\", function() {",
									"   pm.response.to.have.jsonBody();",
									"   let jsonData = JSON.parse(responseBody);",
									"    pm.environment.set(\"signature_subtype\", jsonData.subType);",
									"    pm.environment.set(\"auth_id\", jsonData.attributes.authenticatorId);",
									"});",
									"",
									"pm.test(\"expect signature_subtype to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"signature_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect auth_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"auth_id\")).to.exist; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "71cc7cba-8fb0-40a9-a291-3c1c81aee003",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"signature_subtype\");",
									"pm.environment.unset(\"auth_id\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures/{{signature_id}}?_embedded=true",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures",
								"{{signature_id}}"
							],
							"query": [
								{
									"key": "_embedded",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Disable Signature",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e747a0b6-f537-4d3e-98c4-3ddcad2153c0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": false, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures/{{signature_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures",
								"{{signature_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Enable Signature",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9323dd69-4250-46b2-9d0c-9368281e7498",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{ \"path\": \"/enabled\", \"value\": true, \"op\": \"replace\" }\n]"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures/{{signature_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures",
								"{{signature_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate a Verification Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47e09ad0-8d80-4019-9208-a76fc2307a9d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 202\", function() {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"verification_id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect verification_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"verification_id\")).to.exist; ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"expiresIn\": 120,\n  \"pushNotification\": {\n    \"sound\": \"default\",\n    \"message\": \"A new verification is waiting...\",\n    \"send\": true,\n    \"title\": \"{{tenantid}} Verify Demo\"\n  },\n  \"authenticationMethods\": [\n    {\n      \"methodType\": \"signature\",\n      \"id\": \"{{signature_id}}\"\n    }\n  ],\n  \"logic\": \"OR\",\n  \"transactionData\": {\n    \"additionalData\": [\n      {\n        \"name\": \"foo\",\n        \"value\": \"bar\"\n      }\n    ],\n    \"message\": \"Please verify using {{signature_subtype}}\",\n    \"originIpAddress\": \"192.168.42.42\",\n    \"originUserAgent\": \"POSTMAN\"\n  }\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}/verifications",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Verification Transaction by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70f60f32-5ee4-4e2c-b011-cb1444ab5ce9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}/verifications/{{verification_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}",
								"verifications",
								"{{verification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get All Verification Transactions for Authenticator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cae108ba-b0ca-4c99-a532-8d4585dcbe2b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "image/png",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}/verifications",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}",
								"verifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "#CLEANUP: Delete Signature",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97b0a311-5716-4a07-ad1e-aef3c5b0a6f6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('signature_id');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/signatures/{{signature_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authnmethods",
								"signatures",
								"{{signature_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "#CLEANUP: Delete Authenticator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682d4239-7951-400e-9e93-7d922dc08c1a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('auth_id');",
									"    pm.environment.unset('signature_id');",
									"    pm.environment.unset('signature_subtype');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/{{auth_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"{{auth_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete Authenticator Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a01bb0f0-7dac-40c7-9bb0-6358d2699726",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('authclient_id');",
									"    pm.environment.unset('auth_id');",
									"    pm.environment.unset('signature_id');",
									"    pm.environment.unset('signature_subtype');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/authenticators/clients/{{authclient_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"authenticators",
								"clients",
								"{{authclient_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0e6b068f-3595-4572-af5b-8714f624b374",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b1663646-2c50-45e8-abc0-f5577ea4fb32",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "10 Provisioning V2.0",
			"item": [
				{
					"name": "Users API",
					"item": [
						{
							"name": "Get all users (/v2.0/Users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1e5c60d-9fdd-45e0-955d-c7dbc94dd9d3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user (/v2.0/Users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "346c6fab-a3ba-4ffe-96d2-b77a01e1c86a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to be JSON\", function() {",
											"   pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"expect response body to contain id\", function() {",
											"   pm.response.to.have.jsonBody(\"id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"test_userid\", jsonData.id);",
											"});",
											"",
											"pm.test(\"expect test_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"{{test_username}}\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\",\r\n    \"middleName\": \"Cloud\",\r\n    \"formatted\": \"{{test_firstname}} C {{test_surname}}\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"addresses\": [\r\n    {\r\n      \"locality\": \"Austin\",\r\n      \"country\": \"US\",\r\n      \"type\": \"work\",\r\n      \"streetAddress\": \"11101 Burnet Rd. Austin, TX\",\r\n      \"postalCode\": \"78759\",\r\n      \"primary\": true,\r\n      \"region\": \"TX\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									]
								}
							},
							"response": [
								{
									"name": "Create TOTP (/authnmethods/totp) - adriana",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"authnmethods",
												"totp",
												""
											],
											"query": [
												{
													"key": "qrcodeInResponse",
													"value": "true"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "Keep-Alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Via",
											"value": "1.1 169.53.65.119:443",
											"name": "Via",
											"description": "Informs the client of proxies through which the response was sent."
										},
										{
											"key": "X-Backside-Transport",
											"value": "OK OK",
											"name": "X-Backside-Transport",
											"description": "Custom header"
										},
										{
											"key": "X-Client-IP",
											"value": "32.97.110.58",
											"name": "X-Client-IP",
											"description": "Custom header"
										},
										{
											"key": "X-Global-Transaction-ID",
											"value": "1321042401",
											"name": "X-Global-Transaction-ID",
											"description": "Custom header"
										},
										{
											"key": "content-language",
											"value": "en-US",
											"name": "content-language",
											"description": "The language the content is in"
										},
										{
											"key": "content-type",
											"value": "application/json",
											"name": "content-type",
											"description": "The mime type of this content"
										},
										{
											"key": "date",
											"value": "Tue, 14 Nov 2017 22:41:01 GMT",
											"name": "date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "p3p",
											"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
											"name": "p3p",
											"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "PBC5YS:463686615",
											"key": "DPJSESSIONID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
											"key": "PD-S-SESSION-ID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": false,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
										}
									],
									"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
								}
							]
						},
						{
							"name": "Get user by userName (/v2.0/Users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a3a74d4-15c8-4ba1-a03e-50ca6e24e535",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to have totalResults\", function() {",
											"   pm.response.to.have.jsonBody(\"totalResults\"); ",
											"});",
											"",
											"pm.test(\"expect totalResults = 1\", function() {",
											"   pm.expect(pm.response.json().totalResults).to.equal(1);",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"test_userid\", jsonData.Resources[0].id);",
											"});",
											"",
											"pm.test(\"expect test_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users?filter=userName+eq+\"{{test_username}}\"",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									],
									"query": [
										{
											"key": "filter",
											"value": "userName+eq+\"{{test_username}}\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by Id (/v2.0/Users/{{user_id}})",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user by user_id (/v2.0/Users/{{user_id}})",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06903f5d-39c2-4536-b0cf-7fe575d7cc73",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"{{test_username}}\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\",\r\n    \"middleName\": \"Cloud\",\r\n    \"formatted\": \"{{test_firstname}} C {{test_surname}}\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"addresses\": [\r\n    {\r\n      \"locality\": \"Austin\",\r\n      \"country\": \"US\",\r\n      \"type\": \"work\",\r\n      \"streetAddress\": \"11101 Burnet Rd. Austin, TX\",\r\n      \"postalCode\": \"78759\",\r\n      \"primary\": true,\r\n      \"region\": \"TX\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User (/v2.0/Users/{{user_id}})",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5540cff1-0673-4c01-a4e5-c4f419618e12",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"test_userid\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{test_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PasswordReset API",
					"item": [
						{
							"name": "Reset using auto-generate (/v2.0/Users/{{user_id}}/passwordResetter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85ad49c9-97a7-48ee-bdde-d9f1cf3c51ea",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"value\": {\r\n        \"password\": \"auto-generate\"\r\n      }\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}/passwordResetter",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}",
										"passwordResetter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset with specified password and no notification (/v2.0/Users/{{user_id}}/passwordResetter) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1166dccc-2705-49b6-842f-2f0070e009d5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\r\n  ],\r\n  \"operations\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"value\": {\r\n        \"password\": \"{{test_password}}\",\r\n        \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\": {\r\n          \"notifyType\": \"EMAIL\",\r\n          \"notifyPassword\": false\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Users/{{test_userid}}/passwordResetter",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{test_userid}}",
										"passwordResetter"
									]
								}
							},
							"response": []
						}
					],
					"description": "Admin password reset operation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3df4a6c6-e169-4af2-b676-32aa4ad0771a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "399f7daa-be25-4ca4-8141-771a224c169a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom Attributes API",
					"item": [
						{
							"name": "Get all schema attributes (/v2.0/Schema/attributes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb96198b-e795-4ad7-974e-cafcc364b220",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get schema attributes paging (/v2.0/Schema/attributes?count=10&startIndex=1&sortBy=scimName",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "241bdc5f-9fe7-409f-9d3f-0075590c1661",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes?count=10&startIndex=1&sortBy=scimName",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									],
									"query": [
										{
											"key": "count",
											"value": "10"
										},
										{
											"key": "startIndex",
											"value": "1"
										},
										{
											"key": "sortBy",
											"value": "scimName"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all default schema attributes (/v2.0/Schema/attributes?filter=default)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cd367de-c592-498e-bf6e-413b608bf150",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes?filter=default",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									],
									"query": [
										{
											"key": "filter",
											"value": "default"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom attribute (/v2.0/Schema/attributes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0048b66-4e92-4d44-8f77-abc22970bdc0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttribute\"\r\n  ],\r\n  \"name\": \"customAttribute1\",\r\n  \"description\": \"A custom attribute for demonstration purposes.\",\r\n  \"displayName\": \"Demo Attribute\",\r\n  \"type\": \"string\",\r\n  \"scimName\": \"demoAttribute\",\r\n  \"multiValue\": false\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all custom schema attributes (/v2.0/Schema/attributes?filter=custom)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f97a123f-2f92-47d9-a755-49a5ff467e48",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes?filter=custom",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes"
									],
									"query": [
										{
											"key": "filter",
											"value": "custom"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom attribute (/v2.0/Schema/attributes/{{custom.schemaAttrName}})",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b8cfaf6-a536-429c-a551-ecde1a0f7d8c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttribute\"\r\n  ],\r\n  \"name\": \"customAttribute1\",\r\n  \"description\": \"An updated description for a demonstration custom attribute\",\r\n  \"displayName\": \"Updated Display Name\",\r\n  \"type\": \"string\",\r\n  \"scimName\": \"demoAttr\",\r\n  \"multiValue\": true\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes/customAttribute1",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes",
										"customAttribute1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get schema attribute by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24bc2df7-2c74-4398-bf97-deb81ba13ca4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes/customAttribute1",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes",
										"customAttribute1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with custom attribute (/v2.0/Users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3412893-1d65-4e9d-83ad-ab76b7de8cdc",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"expect response body to exist\", function() {",
											"   pm.response.to.have.body();",
											"});",
											"",
											"pm.test(\"expect response body to be JSON\", function() {",
											"   pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"expect response body to contain id\", function() {",
											"   pm.response.to.have.jsonBody(\"id\");",
											"   let jsonData = JSON.parse(responseBody);",
											"   pm.environment.set(\"custom_userid\", jsonData.id);",
											"});",
											"",
											"pm.test(\"expect custom_userid to be set\", function () { ",
											"    pm.expect(pm.environment.get(\"custom_userid\")).to.exist; ",
											"});",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d51dc744-e868-44a8-a178-cb25b2d6f09c",
										"type": "text/javascript",
										"exec": [
											"pm.environment.unset(\"custom_userid\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"customAttrUser\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\",\r\n    \"middleName\": \"Custom\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false,\r\n    \"customAttributes\": [\r\n      {\r\n        \"name\": \"demoAttr\",\r\n        \"values\": [\r\n          \"myDemoValue1\",\r\n\t\t  \"myDemoValue2\"\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"CIV Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users"
									]
								}
							},
							"response": [
								{
									"name": "Create TOTP (/authnmethods/totp) - adriana",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"authnmethods",
												"totp",
												""
											],
											"query": [
												{
													"key": "qrcodeInResponse",
													"value": "true"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "Keep-Alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Via",
											"value": "1.1 169.53.65.119:443",
											"name": "Via",
											"description": "Informs the client of proxies through which the response was sent."
										},
										{
											"key": "X-Backside-Transport",
											"value": "OK OK",
											"name": "X-Backside-Transport",
											"description": "Custom header"
										},
										{
											"key": "X-Client-IP",
											"value": "32.97.110.58",
											"name": "X-Client-IP",
											"description": "Custom header"
										},
										{
											"key": "X-Global-Transaction-ID",
											"value": "1321042401",
											"name": "X-Global-Transaction-ID",
											"description": "Custom header"
										},
										{
											"key": "content-language",
											"value": "en-US",
											"name": "content-language",
											"description": "The language the content is in"
										},
										{
											"key": "content-type",
											"value": "application/json",
											"name": "content-type",
											"description": "The mime type of this content"
										},
										{
											"key": "date",
											"value": "Tue, 14 Nov 2017 22:41:01 GMT",
											"name": "date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "p3p",
											"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
											"name": "p3p",
											"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "PBC5YS:463686615",
											"key": "DPJSESSIONID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
											"key": "PD-S-SESSION-ID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": false,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
										}
									],
									"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
								}
							]
						},
						{
							"name": "Update user with custom attribute (/v2.0/Users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1775dfd-2f39-4327-993b-c262317a162d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\",\r\n\t\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\r\n  ],\r\n  \"userName\": \"customAttrUser\",\r\n  \"title\": \"End User\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\",\r\n    \"middleName\": \"Custom\"\r\n  },\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"preferredLanguage\": \"en-US\",\r\n  \"active\": true,\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ],\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\": {\r\n    \"userCategory\": \"regular\",\r\n    \"twoFactorAuthentication\": false,\r\n    \"customAttributes\": [\r\n      {\r\n        \"name\": \"demoAttr\",\r\n        \"values\": [\r\n          \"myDemoValue3\"\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\": {\r\n    \"department\": \"CIV Test Users\",\r\n    \"employeeNumber\": \"012345\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{custom_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{custom_userid}}"
									]
								}
							},
							"response": [
								{
									"name": "Create TOTP (/authnmethods/totp) - adriana",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"authnmethods",
												"totp",
												""
											],
											"query": [
												{
													"key": "qrcodeInResponse",
													"value": "true"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "Keep-Alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Via",
											"value": "1.1 169.53.65.119:443",
											"name": "Via",
											"description": "Informs the client of proxies through which the response was sent."
										},
										{
											"key": "X-Backside-Transport",
											"value": "OK OK",
											"name": "X-Backside-Transport",
											"description": "Custom header"
										},
										{
											"key": "X-Client-IP",
											"value": "32.97.110.58",
											"name": "X-Client-IP",
											"description": "Custom header"
										},
										{
											"key": "X-Global-Transaction-ID",
											"value": "1321042401",
											"name": "X-Global-Transaction-ID",
											"description": "Custom header"
										},
										{
											"key": "content-language",
											"value": "en-US",
											"name": "content-language",
											"description": "The language the content is in"
										},
										{
											"key": "content-type",
											"value": "application/json",
											"name": "content-type",
											"description": "The mime type of this content"
										},
										{
											"key": "date",
											"value": "Tue, 14 Nov 2017 22:41:01 GMT",
											"name": "date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "p3p",
											"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
											"name": "p3p",
											"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "PBC5YS:463686615",
											"key": "DPJSESSIONID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
											"key": "PD-S-SESSION-ID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": false,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
										}
									],
									"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
								}
							]
						},
						{
							"name": "Delete user with custom attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7a937df-6c35-49df-ad19-b7b6ad1422dc",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"custom_userid\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Users/{{custom_userid}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Users",
										"{{custom_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom schema attribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a59e7f02-e1ac-4e6d-b5fb-bafe8ad6bf3b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Schema/attributes/customAttribute1",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Schema",
										"attributes",
										"customAttribute1"
									]
								}
							},
							"response": []
						}
					],
					"description": "Adds a custom attribute called nickNames which is multivale",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9e2a769-6e5d-4fa8-9cc7-d34ae9d1db11",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6094c380-644d-4e54-9818-ad5907c2f5be",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Bulk API",
					"item": [
						{
							"name": "Create user, create group and add user to group in single request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c261573-c8fb-4866-a53c-f64049df45f8",
										"type": "text/javascript",
										"exec": [
											"if (responseBody !== null){",
											"    if (responseBody.has(\"location\")) {",
											"        var jsonData = JSON.parse(responseBody);",
											"        var userOperation = jsonData.Operations[0];",
											"        postman.setEnvironmentVariable(\"bulk_userid\", userOperation.location.substring(userOperation.location.lastIndexOf(\"/\") + 1));",
											"        var groupOperation = jsonData.Operations[1];",
											"        postman.setEnvironmentVariable(\"bulk_groupid\", groupOperation.location.substring(groupOperation.location.lastIndexOf(\"/\") + 1));",
											"    }",
											"}",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\r\n    \"Operations\":[ \r\n\t   { \r\n\t      \"method\":\"POST\", \r\n\t      \"bulkId\":\"qwerty0\", \r\n\t      \"path\":\"/Users\", \r\n\t      \"data\":{ \r\n\t           \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"], \r\n\t           \"userName\":\"bulkuser\", \r\n\t           \"emails\":[{ \"type\":\"work\", \"value\":\"{{test_email}}\" }] \r\n\t       } \r\n\t   }, \r\n\t   { \r\n\t       \"method\":\"POST\", \r\n\t       \"path\":\"/Groups\", \r\n\t       \"bulkId\":\"qwerty2\", \r\n\t       \"data\": { \r\n\t           \"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:Group\"], \r\n\t           \"displayName\":\"bulkgroup\", \r\n\t           \"members\":[ {\"type\":\"user\", \"value\":\"bulkId:qwerty0\"} ] \r\n\t        }\r\n\t   }\r\n   ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Bulk",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Bulk"
									]
								},
								"description": "Creates a user\nCreate a group and add user as a member\n\nCreate enviroment vars\n  bulk.user_id\n  bulk.group_id"
							},
							"response": [
								{
									"name": "Create TOTP (/authnmethods/totp) - adriana",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"authnmethods",
												"totp",
												""
											],
											"query": [
												{
													"key": "qrcodeInResponse",
													"value": "true"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "Keep-Alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Via",
											"value": "1.1 169.53.65.119:443",
											"name": "Via",
											"description": "Informs the client of proxies through which the response was sent."
										},
										{
											"key": "X-Backside-Transport",
											"value": "OK OK",
											"name": "X-Backside-Transport",
											"description": "Custom header"
										},
										{
											"key": "X-Client-IP",
											"value": "32.97.110.58",
											"name": "X-Client-IP",
											"description": "Custom header"
										},
										{
											"key": "X-Global-Transaction-ID",
											"value": "1321042401",
											"name": "X-Global-Transaction-ID",
											"description": "Custom header"
										},
										{
											"key": "content-language",
											"value": "en-US",
											"name": "content-language",
											"description": "The language the content is in"
										},
										{
											"key": "content-type",
											"value": "application/json",
											"name": "content-type",
											"description": "The mime type of this content"
										},
										{
											"key": "date",
											"value": "Tue, 14 Nov 2017 22:41:01 GMT",
											"name": "date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "p3p",
											"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
											"name": "p3p",
											"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "PBC5YS:463686615",
											"key": "DPJSESSIONID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
											"key": "PD-S-SESSION-ID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": false,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
										}
									],
									"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
								}
							]
						},
						{
							"name": "Get group by Id (/v2.0/Groups/{{bulk.group_id}})",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{hostname}}/v2.0/Groups/{{bulk_groupid}}",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups",
										"{{bulk_groupid}}"
									]
								},
								"description": "Shows the group and user member created by bulk operation"
							},
							"response": []
						},
						{
							"name": "Delete user and group in single request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40f32375-ab2e-4c03-bea8-cf538ad7bf98",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.unset(\"bulk_userid\");",
											"    pm.environment.unset(\"bulk_groupid\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:BulkRequest\"],\r\n    \"Operations\":[ \r\n\t   { \r\n\t      \"method\":\"DELETE\", \r\n\t      \"path\":\"/Users/{{bulk_userid}}\"\r\n\r\n\t   }, \r\n\t   { \r\n\t       \"method\":\"DELETE\", \r\n\t       \"path\":\"/Groups/{{bulk_groupid}}\"\r\n\t   }\r\n   ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Bulk",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Bulk"
									]
								},
								"description": "Cleans up the user and group created by the bulk operation"
							},
							"response": [
								{
									"name": "Create TOTP (/authnmethods/totp) - adriana",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"authnmethods",
												"totp",
												""
											],
											"query": [
												{
													"key": "qrcodeInResponse",
													"value": "true"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "Keep-Alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Via",
											"value": "1.1 169.53.65.119:443",
											"name": "Via",
											"description": "Informs the client of proxies through which the response was sent."
										},
										{
											"key": "X-Backside-Transport",
											"value": "OK OK",
											"name": "X-Backside-Transport",
											"description": "Custom header"
										},
										{
											"key": "X-Client-IP",
											"value": "32.97.110.58",
											"name": "X-Client-IP",
											"description": "Custom header"
										},
										{
											"key": "X-Global-Transaction-ID",
											"value": "1321042401",
											"name": "X-Global-Transaction-ID",
											"description": "Custom header"
										},
										{
											"key": "content-language",
											"value": "en-US",
											"name": "content-language",
											"description": "The language the content is in"
										},
										{
											"key": "content-type",
											"value": "application/json",
											"name": "content-type",
											"description": "The mime type of this content"
										},
										{
											"key": "date",
											"value": "Tue, 14 Nov 2017 22:41:01 GMT",
											"name": "date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "p3p",
											"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
											"name": "p3p",
											"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "PBC5YS:463686615",
											"key": "DPJSESSIONID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
											"key": "PD-S-SESSION-ID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": false,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
										}
									],
									"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87b71319-d199-4dd3-b92d-513684a44bcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "44ee29b9-3005-408a-9097-fe534c01565a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups API",
					"item": [
						{
							"name": "Create group (/v2.0/Groups)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3c8ae4a-8671-43a0-af00-b6ecd3af93cc",
										"type": "text/javascript",
										"exec": [
											"if (responseBody !== null){",
											"    if (responseBody.has(\"displayName\")) {",
											"        var jsonData = JSON.parse(responseBody);",
											"        postman.setEnvironmentVariable(\"group_id\", jsonData.id);",
											"    }",
											"}",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"testGroup\",\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\": {\r\n    \"description\": \"This is a test group\"\r\n  },\r\n  \"members\": [\r\n    {\r\n      \"type\": \"user\",\r\n      \"value\": \"{{test_userid}}\"\r\n    }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\"\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups"
									]
								}
							},
							"response": [
								{
									"name": "Create TOTP (/authnmethods/totp) - adriana",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
										},
										"url": {
											"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
											"protocol": "{{scheme}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1.0",
												"authnmethods",
												"totp",
												""
											],
											"query": [
												{
													"key": "qrcodeInResponse",
													"value": "true"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "Keep-Alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Via",
											"value": "1.1 169.53.65.119:443",
											"name": "Via",
											"description": "Informs the client of proxies through which the response was sent."
										},
										{
											"key": "X-Backside-Transport",
											"value": "OK OK",
											"name": "X-Backside-Transport",
											"description": "Custom header"
										},
										{
											"key": "X-Client-IP",
											"value": "32.97.110.58",
											"name": "X-Client-IP",
											"description": "Custom header"
										},
										{
											"key": "X-Global-Transaction-ID",
											"value": "1321042401",
											"name": "X-Global-Transaction-ID",
											"description": "Custom header"
										},
										{
											"key": "content-language",
											"value": "en-US",
											"name": "content-language",
											"description": "The language the content is in"
										},
										{
											"key": "content-type",
											"value": "application/json",
											"name": "content-type",
											"description": "The mime type of this content"
										},
										{
											"key": "date",
											"value": "Tue, 14 Nov 2017 22:41:01 GMT",
											"name": "date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "p3p",
											"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
											"name": "p3p",
											"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
										}
									],
									"cookie": [
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "PBC5YS:463686615",
											"key": "DPJSESSIONID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
											"key": "PD-S-SESSION-ID"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": true,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": true,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
										},
										{
											"expires": "Invalid Date",
											"httpOnly": false,
											"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
											"path": "/",
											"secure": false,
											"value": "%2Fauthsvc",
											"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
										}
									],
									"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"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\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
								}
							]
						},
						{
							"name": "Remove all Users from Group (/v2.0/Groups/{{group.group_id}})",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c174125-73c8-48ac-9c35-9552253158fd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"testGroup\",\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\": {\r\n    \"description\": \"This is a test group\"\r\n  },\r\n  \"members\": [],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups/{{group_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Users for Group (/v2.0/Groups/{{group.group_id}})",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c174125-73c8-48ac-9c35-9552253158fd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"displayName\": \"testGroup\",\r\n  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\": {\r\n    \"description\": \"This is a test group\"\r\n  },\r\n  \"members\": [\r\n   {\r\n    \"type\": \"user\",\r\n    \"value\": \"{{test_userid}}\"\r\n   }\r\n  ],\r\n  \"schemas\": [\r\n    \"urn:ietf:params:scim:schemas:core:2.0:Group\",\r\n\t\"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\"\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups/{{group_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all groups (/v2.0/Groups)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/scim+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Group (/v2.0/Groups/{{group.group_id}})",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b711bb74-74e0-4555-a9a5-48f5c2b4ee64",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"expect status code to be 204\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"group_id\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v2.0/Groups/{{group_id}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v2.0",
										"Groups",
										"{{group_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f5f35f1f-fff8-47b7-98cd-e4242c1a65fb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3435d040-e009-4aa6-97d3-0586c4a22789",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d36e728f-f578-46c0-838a-f92fc95a0fb1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6c349583-959a-4cee-8a31-2942e944efd7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "11 OAuth 2.0 Device Flow",
			"item": [
				{
					"name": "Initiate Device Flow (/v1.0/endpoint/default/device_authorization)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d020ab91-2fea-4471-b80f-1ea55a8f3995",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have device_code\", function() {",
									"   pm.response.to.have.jsonBody(\"device_code\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"device_code\", jsonData.device_code);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{app_client_id}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/device_authorization",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"device_authorization"
							]
						}
					},
					"response": []
				},
				{
					"name": "Poll For Token (/v1.0/endpoint/default/token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d020ab91-2fea-4471-b80f-1ea55a8f3995",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have access_token\", function() {",
									"   pm.response.to.have.jsonBody(\"access_token\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"access_token\", jsonData.access_token);",
									"   pm.environment.unset('device_code');",
									"});",
									"",
									"pm.test(\"expect response body to have refresh_token\", function() {",
									"   pm.response.to.have.jsonBody(\"refresh_token\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"   pm.environment.unset('device_code');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:device_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{app_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{app_client_secret}}",
									"type": "text"
								},
								{
									"key": "device_code",
									"value": "{{device_code}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/token",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Introspect (/v1.0/endpoint/default/introspect)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{app_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{app_client_secret}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/introspect",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "#User Info (/v1.0/endpoint/default/userinfo)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/userinfo",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"userinfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run Refresh Token Grant Flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52550c91-afc6-4c8c-8279-3af4facd8965",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have access_token\", function() {",
									"   pm.response.to.have.jsonBody(\"access_token\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"access_token\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"expect response body to have refresh_token\", function() {",
									"   pm.response.to.have.jsonBody(\"refresh_token\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{app_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{app_client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/token",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Revoke Access (/oidc/endpoint/default/revoke)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{app_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{app_client_secret}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/revoke",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"revoke"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Revoke Refresh (/oidc/endpoint/default/revoke)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{app_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{app_client_secret}}",
									"type": "text"
								},
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/oidc/endpoint/default/revoke",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"oidc",
								"endpoint",
								"default",
								"revoke"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9a0334a5-2cec-4a7c-8fcc-ee8cc279dc50",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9e0fc2d9-86f6-461e-84a2-77e971ba8ce7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "xx (Optional) Create API Client with Local Admin User",
			"item": [
				{
					"name": "#Initiate login mechanism",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "060381e4-f011-41f5-993e-3f89da165051",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"$ = cheerio.load(responseBody);",
									"let path = $('body').attr('action');",
									"let key = 'StateId=';",
									"let stateId = path.substr(path.indexOf(key) + key.length);",
									"",
									"pm.test(\"expect response body to contain attribute '\"+key.substr(0,key.length-1)+\"'\", function() {",
									"   pm.expect(stateId).to.not.be.empty;",
									"   pm.environment.set('state_id', stateId);",
									"});",
									"",
									"pm.environment.unset('target');",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15c64369-b5bf-4926-b57e-7a0013cd7525",
								"type": "text/javascript",
								"exec": [
									"//Clean up state",
									"pm.environment.unset('state_id');",
									"pm.environment.unset('jsessionid');",
									"pm.environment.unset(pm.environment.get('admin_username') + '.token');",
									"",
									"//Set target (must be sent to initiate login)",
									"pm.environment.set('target', encodeURIComponent('https://'+pm.environment.get('tenantid')+'.'+pm.environment.get('urlsuffix')+'/ui/admin'));",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/authsvc/mtfim/sps/authsvc?PolicyId=urn:ibm:security:authentication:asf:basicldapuser&Target={{target}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"authsvc",
								"mtfim",
								"sps",
								"authsvc"
							],
							"query": [
								{
									"key": "PolicyId",
									"value": "urn:ibm:security:authentication:asf:basicldapuser"
								},
								{
									"key": "Target",
									"value": "{{target}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Complete admin user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42aa44c6-450e-4bf7-b071-9c24a69fc31a",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"let key = 'authKey: \"';",
									"$ = cheerio.load(responseBody);",
									"let script = $('script').text();",
									"let start = script.indexOf(key) + key.length;",
									"let authKey = script.substring(start, script.indexOf('\"', start));",
									"",
									"pm.test(\"expect response body to contain attribute '\"+key+\"'\", function() {",
									"   pm.expect(authKey).to.not.be.empty;",
									"});",
									"",
									"let username = pm.variables.get('admin_username');",
									"pm.environment.set(username + '.token', authKey);",
									"pm.environment.set('access_token', authKey);",
									"",
									"pm.environment.unset('state_id');",
									"pm.environment.unset('jsessionid');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c2b2c357-068c-4209-bc43-bcab7865f54a",
								"exec": [
									"let username = pm.variables.get('admin_username');",
									"pm.environment.unset(username + '.token');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "JSESSIONID={{jsessionid}}",
								"disabled": true
							},
							{
								"key": "Host",
								"value": "{{hostname}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{admin_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{admin_password}}",
									"type": "text"
								},
								{
									"key": "operation",
									"value": "verify",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/authsvc/mtfim/sps/authsvc?StateId={{state_id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"authsvc",
								"mtfim",
								"sps",
								"authsvc"
							],
							"query": [
								{
									"key": "StateId",
									"value": "{{state_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "#Create API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c0d41fa-def5-4323-bdbf-4ca433797267",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"location response header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    let clientUri = postman.getResponseHeader('location');",
									"    pm.environment.set('clientUri', clientUri);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e33357d5-8f40-46ff-b794-1dd2b4f51e24",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('clientUri');"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{admin_username}}.token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entitlements\": [\n    \"authnAnyUser\",\n    \"manageAuthenticatorsConfig\",\n    \"manageAuthenticatorsAnyUser\",\n    \"manageEnrollMFAMethodAnyUser\",\n    \"manageMFAMethods\", \n    \"manageUserGroups\"\n  ],\n  \"enabled\": true,\n  \"clientName\": \"Postman API Client\"\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/apiclients",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"apiclients"
							]
						}
					},
					"response": []
				},
				{
					"name": "#Get API client details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51cc4a04-a1d8-4e2a-b7c5-9cc43e458f66",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = {};",
									"try {",
									"    jsonData = pm.response.json();",
									"} catch(err) {",
									"    console.log(err);",
									"}",
									"",
									"pm.test(\"expect attribute 'id' to exist\", function () {",
									"    pm.environment.set('client_id', jsonData.id);",
									"    pm.expect(jsonData.id).to.exist;",
									"});",
									"",
									"pm.test(\"expect attribute 'clientSecret' to exist\", function () {",
									"    pm.expect(jsonData.clientSecret).to.exist;",
									"        pm.environment.set('client_secret', jsonData.clientSecret);",
									"});",
									"",
									"pm.test(\"expect client_id to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"client_id\")).to.exist; ",
									"});",
									"",
									"pm.test(\"expect client_secret to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"client_secret\")).to.exist; ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{admin_username}}.token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{clientUri}}",
							"host": [
								"{{clientUri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CLEANUP: Delete API Client and forget local admin token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ecb2f03-c77c-484f-b469-c753a210e462",
								"exec": [
									"pm.test(\"expect status code to be 204\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset('clientUri');",
									"    pm.environment.unset('access_token');",
									"    pm.environment.set('client_id','');",
									"    pm.environment.set('client_secret','');",
									"    let username = pm.variables.get('admin_username');",
									"    pm.environment.unset(username + '.token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{admin_username}}.token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{clientUri}}",
							"host": [
								"{{clientUri}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Create an API client that we can then use to perform web API requests to demonstrate IBM Verify web APIs.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8353530b-7fa8-4961-bff2-b5ead49ac51a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5ec1021c-e7a8-49a6-b62a-38c51f30acea",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "xx User Provisioning V1.0 (Deprecated)",
			"item": [
				{
					"name": "Get all users (/v1.0/Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df61e041-eb1e-4a73-9c90-fda11ec437ad",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/Users",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"Users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user (/v1.0/Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ebb9647-67ef-4c82-aa1c-caf8052d1564",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to be JSON\", function() {",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"expect response body to contain id\", function() {",
									"   pm.response.to.have.jsonBody(\"id\");",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.id);",
									"});",
									"",
									"pm.test(\"expect test_userid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"{{test_username}}\",\r\n  \"userType\": \"Regular\",\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"password\": \"{{test_password}}\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\"\r\n  },\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/Users",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"Users"
							]
						}
					},
					"response": [
						{
							"name": "Create TOTP (/authnmethods/totp) - adriana",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"owner\": \"50EGVUXX0E\",\n  \"isEnabled\": true,\n  \"ownerDisplayName\": \"adriana\"\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{hostname}}/v1.0/authnmethods/totp/?qrcodeInResponse=true",
									"protocol": "{{scheme}}",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"v1.0",
										"authnmethods",
										"totp",
										""
									],
									"query": [
										{
											"key": "qrcodeInResponse",
											"value": "true"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "Keep-Alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "1.1 169.53.65.119:443",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Backside-Transport",
									"value": "OK OK",
									"name": "X-Backside-Transport",
									"description": "Custom header"
								},
								{
									"key": "X-Client-IP",
									"value": "32.97.110.58",
									"name": "X-Client-IP",
									"description": "Custom header"
								},
								{
									"key": "X-Global-Transaction-ID",
									"value": "1321042401",
									"name": "X-Global-Transaction-ID",
									"description": "Custom header"
								},
								{
									"key": "content-language",
									"value": "en-US",
									"name": "content-language",
									"description": "The language the content is in"
								},
								{
									"key": "content-type",
									"value": "application/json",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "date",
									"value": "Tue, 14 Nov 2017 22:41:01 GMT",
									"name": "date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "p3p",
									"value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
									"name": "p3p",
									"description": "This header is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this header with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies."
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "PBC5YS:463686615",
									"key": "DPJSESSIONID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "1_2_0_8Hk2CDGVqMfOJVX4btbi2KdhF-NA3JYZA7S7GWyIIg3vXR40",
									"key": "PD-S-SESSION-ID"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_52272a24-c615-11e7-af7b-000c290debb6"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": true,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_59e74f82-c615-11e7-a0f6-000c292e073e"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "tenant-orch-test.ite1.idng.ibmcloudsecurity.com",
									"path": "/",
									"secure": false,
									"value": "%2Fauthsvc",
									"key": "PD_STATEFUL_caa71e5a-c89a-11e7-a0f6-000c292e073e"
								}
							],
							"body": "{\"owner\":\"50EGVUXX0E\",\"methodType\":\"totp\",\"isValidated\":false,\"creationTime\":\"2017-11-14T22:41:01.263Z\",\"isEnabled\":true,\"attributes\":{\"period\":30,\"digits\":6,\"secret\":\"D4EQVJ2PKRZPFCC2\",\"b64QRCode\":\"iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAIAAAD2HxkiAAAGE0lEQVR42u3cQZKDMBAEQf7/afwIh3p6RNaZNRYodZnwPq+k0R6PQIJQglAShBKEkiCUIJQEoQShJAglCCVBKEEoCUIJQkkQShBKglCCUBKEEoSSIJQglAShBKEkCCUIJUEoQSgJQglCSRBKEEpagfDp68SK/lx77Hme+J6zKyrcIRBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ9iLMLfLAToqtaHZ7zS6zcIdACCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQngtwtgEbPURMGt49lC7cIdACCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQghh7O5bPtPdIYQQAwghhNDdIYQQAwghhNDdIYQQAwghhNDdIRx7xLE3tGWeOfvnEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCeOH2+sj47sSNYldeuD8hhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIQwvcrbVG/EjVxbuEAghhBBCCF0JIYQQQgghhK6EEEIIIYQQQldCuAzh6mLvMvaZhSPWT28wjwBCCCGEEEIIBSGEEEIIIYSCEEIIIYQQwtp9fGL6t+VGsc19YvoXu1Hsy0MIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCaE64+z+4Fe6kEwfQllnu8JeHEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhPBWb7NTtRPeYrBPLDP2mYXeIIQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGsQDj7jBrnRQd20gmEs2cihBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQNnZiyxZ+ptdx06ODEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhDD9Mk68y8IR1ok/3zJRLDzpTrw4CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQghvmBPO0jrxMmK7MzZAi31m7Oz+xJwQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEML8Cy6UWbhpZmePsfPr7QtCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQwjStwnFTbDA1O+iLnUqzU98tQQghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIYv/foD1VivzDa8uhm1/6RYSyEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBUIC/dH4ZWzQ7kth8WWBwIhhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIYQXCLeOm+2CfONTum6ZCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQngDwthML7YVYiOsxrlW6lQqvDuEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhNci3GI4tr0Kz4XVNgpPOgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII0whXD5FiYGYZxEasW046CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgivRVg4RHo3twXh6hVBCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQngDwsKZ3p/LjI3vTnzPWQaFa4cQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEcBnC1VO12d255UyMHX+Fo0sIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCHsRPn1tsRE7Fz5yfs16gxBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYSwAuHs9G/L9podCcaOv9kVQQghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII4fCsrPDK2UEf2BBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQrgAYWx/bGEw++XfJUEIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCOGFPyaKzcpmz6/ZVwwhhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII4Q0ItxwBW/ZH4eTzI18eQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEMJehLPNvvXY9K/wbRZyhRBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYTwWoSSIJQglAShBKEkCCUIJUEoQSgJQglCSRBKEEqCUIJQglAShBKEkiCUIJQEoQShJAglCCVBKEEoCUIJQkkQShBKglCCUBKEEoSSIJTu7AcfneAH+pSnRgAAAABJRU5ErkJggg==\",\"algorithm\":\"HmacSHA1\"},\"id\":\"243060fd-09fa-48d2-b59e-708a7a634efb\"}"
						}
					]
				},
				{
					"name": "Get user by userName (/v1.0/Users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23fe4b65-0df6-435b-9a15-21b55d6d3261",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"expect response body to exist\", function() {",
									"   pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"expect response body to have totalResults\", function() {",
									"   pm.response.to.have.jsonBody(\"totalResults\"); ",
									"});",
									"",
									"pm.test(\"expect totalResults = 1\", function() {",
									"   pm.expect(pm.response.json().totalResults).to.equal(1);",
									"   let jsonData = JSON.parse(responseBody);",
									"   pm.environment.set(\"test_userid\", jsonData.resources[0].id);",
									"});",
									"",
									"pm.test(\"expect test_userid to be set\", function () { ",
									"    pm.expect(pm.environment.get(\"test_userid\")).to.exist; ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/Users?filter=userName+eq+\"{{test_username}}\"",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"Users"
							],
							"query": [
								{
									"key": "filter",
									"value": "userName+eq+\"{{test_username}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by Id (/v1.0/Users/{{user_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0623aa9-9f38-44e8-88d0-de95548f34b5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/Users/{{test_userid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"Users",
								"{{test_userid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user by user_id (/v1.0/Users/{{user_id}})",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"{{test_username}}\",\r\n  \"userType\": \"Regular\",\r\n  \"displayName\": \"{{test_firstname}} {{test_surname}}\",\r\n  \"password\": \"{{test_password}}\",\r\n  \"name\": {\r\n    \"familyName\": \"{{test_surname}}\",\r\n    \"givenName\": \"{{test_firstname}}\"\r\n  },\r\n  \"emails\": [\r\n    {\r\n      \"value\": \"{{test_email}}\",\r\n      \"type\": \"work\"\r\n    }\r\n  ],\r\n  \"phoneNumbers\": [\r\n    {\r\n      \"value\": \"{{test_phone}}\",\r\n      \"type\": \"mobile\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "https://{{hostname}}/v1.0/Users/{{test_userid}}",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"Users",
								"{{test_userid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (/v1.0/Users/{{user_id}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d0ddaf7-b7d6-4ea7-aac7-fdd4a19344e4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"expect status code to be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{scheme}}://{{hostname}}/v1.0/Users/{{test_userid}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"v1.0",
								"Users",
								"{{test_userid}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "55bcfaa8-d1b0-4812-9217-8e7069cd7d97",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "60a50461-7de2-4bf7-9b3a-45cfdaff5448",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c192547a-c3c9-44ec-8c13-0f192a0ef180",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1e1f7560-da01-45a5-841d-5f8f354f5ca4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}